// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ProductCatalog.DAL;

namespace ProductCatalog.DAL.Migrations
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("EvaluationTask.DAL.Entities.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Description")
                        .HasColumnType("int");

                    b.Property<int>("Name")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("EvaluationTask.DAL.Entities.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("EvaluationTask.DAL.Entities.ProductSpecField", b =>
                {
                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("SpecFieldId")
                        .HasColumnType("int");

                    b.HasKey("ProductId", "SpecFieldId");

                    b.HasIndex("SpecFieldId");

                    b.ToTable("ProductSpecFields");
                });

            modelBuilder.Entity("EvaluationTask.DAL.Entities.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Manager"
                        });
                });

            modelBuilder.Entity("EvaluationTask.DAL.Entities.SpecField", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("SpecFields");
                });

            modelBuilder.Entity("EvaluationTask.DAL.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("PasswordHash")
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Username")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            FirstName = "Manager",
                            LastName = "User",
                            PasswordHash = new byte[] { 195, 57, 76, 248, 151, 180, 223, 168, 9, 238, 107, 87, 0, 247, 101, 116, 250, 156, 216, 164, 177, 3, 183, 30, 175, 64, 154, 21, 199, 141, 10, 128, 137, 42, 249, 137, 165, 42, 244, 225, 46, 51, 12, 19, 112, 102, 103, 135, 176, 191, 184, 77, 22, 65, 123, 171, 182, 23, 192, 141, 203, 88, 76, 175 },
                            PasswordSalt = new byte[] { 30, 54, 173, 114, 75, 101, 188, 109, 70, 113, 0, 210, 179, 177, 196, 178, 46, 202, 242, 138, 239, 204, 29, 89, 96, 136, 196, 236, 131, 120, 69, 176, 3, 228, 223, 63, 110, 108, 26, 141, 141, 76, 159, 135, 116, 252, 251, 181, 106, 214, 163, 86, 107, 201, 16, 30, 177, 99, 121, 220, 87, 88, 74, 10, 103, 5, 195, 246, 184, 204, 127, 241, 197, 108, 236, 21, 155, 55, 194, 46, 21, 181, 107, 82, 171, 11, 195, 32, 244, 141, 113, 190, 76, 151, 206, 49, 253, 149, 216, 232, 34, 106, 23, 197, 188, 99, 226, 8, 64, 146, 30, 194, 158, 244, 151, 138, 236, 65, 100, 160, 66, 172, 137, 206, 96, 14, 116, 73 },
                            Username = "admin"
                        });
                });

            modelBuilder.Entity("EvaluationTask.DAL.Entities.UserRole", b =>
                {
                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("RoleId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("UserRoles");

                    b.HasData(
                        new
                        {
                            RoleId = 1,
                            UserId = 1
                        });
                });

            modelBuilder.Entity("EvaluationTask.DAL.Entities.ProductSpecField", b =>
                {
                    b.HasOne("EvaluationTask.DAL.Entities.Product", "Product")
                        .WithMany("ProductSpecFields")
                        .HasForeignKey("ProductId")
                        .HasConstraintName("FK_ProductSpecFields_ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EvaluationTask.DAL.Entities.SpecField", "SpecField")
                        .WithMany("ProductSpecFields")
                        .HasForeignKey("SpecFieldId")
                        .HasConstraintName("FK_ProductSpecFields_SpecFieldId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EvaluationTask.DAL.Entities.SpecField", b =>
                {
                    b.HasOne("EvaluationTask.DAL.Entities.Category", "Category")
                        .WithMany("SpecFields")
                        .HasForeignKey("CategoryId")
                        .HasConstraintName("FK_SpecFields_CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EvaluationTask.DAL.Entities.UserRole", b =>
                {
                    b.HasOne("EvaluationTask.DAL.Entities.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .HasConstraintName("FK_UserRoles_RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EvaluationTask.DAL.Entities.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_UserRoles_UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
